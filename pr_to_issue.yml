name: On Pull Requests

on:
  pull_request:
    types: [opened, closed, reopened]

env:
    GH_TOKEN: ${{ secrets.YOUR_TOKEN }} ## YOUR_TOKEN is a personal access token set as an action secret for your repository
    ORGANIZATION: your-org-name ## Your organization name
    PROJECT_NUMBER: project-number ## Your project (beta) number. You can find it in the project's URL.
    REPO: name-of-repository ## The name of the repository your issues, branches and project are on
    
jobs:
  Move-Issue-In-Project:
    runs-on: ubuntu-latest
    steps:
      - name: Set Env Variables For New/Reopened PR
        if: github.event.action == 'opened' || github.event.action == 'reopened'
        run: |
          echo "ISSUE_PROJECT_STATUS="In Review"" >> $GITHUB_ENV  
          
      - name: Set Env Variables For Closed PR
        if: (!github.event.pull_request.merged) && (github.event.action == 'closed')
        run: |
          echo "ISSUE_PROJECT_STATUS="In Progress"" >> $GITHUB_ENV    

      - name: Set Env Variables For Closed and Merged PR
        if: (github.event.pull_request.merged) && (github.event.action == 'closed')
        run: |
          echo "ISSUE_PROJECT_STATUS="Done"" >> $GITHUB_ENV    
          
      - name: Get Created Issue Number
        run: |
          branch_name=`echo '${{ github.event.pull_request.head.ref }}'`
          num=${branch_name#*#}
          issue_num=`echo $num | egrep -o '^[^/]+'`
          echo "ISSUE_NUM=$issue_num" >> $GITHUB_ENV   
        
#           branch_name=`echo '${{ github.event.pull_request.head.ref }}'`
#           num=`echo $branch_name | egrep -o '^[^/]+'`
#           issue_num=${num#*#}
#           echo "ISSUE_NUM=$issue_num" >> $GITHUB_ENV   
          
      - name: Get Issue Project Item ID
        run: |
          gh api graphql -f query='query FindIssueID {
            repository(owner:"${{ env.ORGANIZATION }}", name:"${{ env.REPO }}") {
                issue(number:${{ env.ISSUE_NUM }}) {
                      id,
                      projectItems(first: 1){
                        nodes{ 
                          id
                          }
                        },
                      }
                    }
                  }' > project_data.json
                  echo 'ISSUE_ID='$(jq '.data.repository.issue.id' project_data.json) >> $GITHUB_ENV
                  string=$(jq '.data.repository.issue.projectItems.nodes[0].id' project_data.json)
                  string=`echo "$string" | tr -d '"'`
                  echo 'ISSUE_PROJECT_ID='$string >> $GITHUB_ENV
       
      - name: Get Project Status Item ID
        run: |
          gh api graphql -f query='query{
          organization(login: "${{ env.ORGANIZATION }}"){
              projectV2(number: ${{ env.PROJECT_NUMBER }}) {
                  id
                  fields(first:20) {
                    nodes {
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' > project_data.json
          echo 'PROJECT_ID='$(jq '.data.organization.projectV2.id' project_data.json) >> $GITHUB_ENV
          echo 'STATUS_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .id' project_data.json) >> $GITHUB_ENV
          echo 'NEW_STATUS_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="${{env.ISSUE_PROJECT_STATUS}}" ) |.id' project_data.json) >> $GITHUB_ENV
          
      - name: Move Issue Number ${{ env.ISSUE_NUM }} Into ${{ env.ISSUE_PROJECT_STATUS }}
        run: |
          gh api graphql -f query='
            mutation {
              updateProjectV2ItemFieldValue(
                input: {
                      projectId: ${{ env.PROJECT_ID }}
                      itemId: "${{ env.ISSUE_PROJECT_ID }}"
                      fieldId: ${{ env.STATUS_FIELD_ID }}
                      value: { 
                          singleSelectOptionId: ${{ env.NEW_STATUS_ID }}
                      }
                }
                ) {
                projectV2Item {
                  id
                }
              }
            }'
            
      - name: Close Issue
        if: (github.event.action == 'closed') && (github.event.pull_request.merged)
        run: |
         gh api graphql -f query='
            mutation {
              updateIssue(input: {id : ${{ env.ISSUE_ID }} , state: CLOSED}){
                issue {
                      id
                     title
                    }
                  }
                }'
      
